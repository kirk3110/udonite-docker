version: "3.8"

networks: { udonite: {} }
volumes:  { mongo_data: {}, backups_data: {} }

services:
  mongo:
    image: mongo:6.0
    container_name: udon-mongo
    command: ["--bind_ip_all"]
    volumes: [ "mongo_data:/data/db" ]
    networks: [udonite]
    restart: unless-stopped

  server:
    build:
      context: ./server
      dockerfile: Dockerfile.server
    container_name: udon-server
    environment:
      - NODE_ENV=production
      - UDONITE_PORT=${UDONITE_PORT}
      - UDONITE_URL=${PUBLIC_URL}
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - UDONITE_IMAGE_URL=${PUBLIC_URL}image/
      - UDONITE_AUDIO_URL=${PUBLIC_URL}audio/
    volumes:
      - ./data/image:/var/www/udonite/image
      - ./data/audio:/var/www/udonite/audio
    depends_on: [mongo]
    networks: [udonite]
    restart: unless-stopped

  client:
    build:
      context: ./client
      dockerfile: Dockerfile.client
    container_name: udon-client
    ports: ["80:80"]
    depends_on: [server]
    environment:
      - PUBLIC_URL=${PUBLIC_URL}
      - BCDICE_API_URL=${BCDICE_API_URL}
    volumes:
      - ./client/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./data/image:/srv/udonite/image:ro
      - ./data/audio:/srv/udonite/audio:ro
    networks: [udonite]
    restart: unless-stopped

  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile.backup
    container_name: udon-backup
    environment:
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - RETENTION_DAYS=${BACKUP_RETENTION_DAYS}
      - TZ=${TZ}
      - BACKUP_CRON=${BACKUP_CRON}
    volumes:
      - ./backups:/backups:rw
    depends_on: [mongo]
    networks: [udonite]
    restart: unless-stopped
